# encoding: utf - 8
import os
import pickle
import traceback
from datetime import datetime
from functools import wraps
import telegram
from telegram.ext import CommandHandler, MessageHandler, Filters
from telegram.ext import Updater
from bs4 import BeautifulSoup as bs
from dotenv import load_dotenv

flag_textbook_mode_from_text = {}
path_env = "env\.env"
load_dotenv(dotenv_path=path_env)
token = '909657915:AAFg_R2Ib0hw1xQ8sYFHDD5pSVBoFiwpwnk'
global_domashka_keyboard = {}
ex_table = {}


PROXY_HOST = '193.233.78.155'
PROXY_PORT = 65233
PROXY_USER = 'bbildroid228'
PROXY_PASS = 'S3n1ZiQ'

manifest_json = """
{
    "version": "1.0.0",
    "manifest_version": 2,
    "name": "Chrome Proxy",
    "permissions": [
        "proxy",
        "tabs",
        "unlimitedStorage",
        "storage",
        "<all_urls>",
        "webRequest",
        "webRequestBlocking"
    ],
    "background": {
        "scripts": ["background.js"]
    },
    "minimum_chrome_version":"22.0.0"
}
"""

background_js = """
var config = {
        mode: "fixed_servers",
        rules: {
          singleProxy: {
            scheme: "http",
            host: "%s",
            port: parseInt(%s)
          },
          bypassList: ["localhost"]
        }
      };
chrome.proxy.settings.set({value: config, scope: "regular"}, function() {});
function callbackFn(details) {
    return {
        authCredentials: {
            username: "%s",
            password: "%s"
        }
    };
}
chrome.webRequest.onAuthRequired.addListener(
            callbackFn,
            {urls: ["<all_urls>"]},
            ['blocking']
);
""" % (PROXY_HOST, PROXY_PORT, PROXY_USER, PROXY_PASS)



def catch_error(f):
    @wraps(f)
    def wrap(update, context):
        try:
            return f(update, context)
        except Exception as e:
            bot.send_message(chat_id=update.message.chat_id, text="Error occured: " + traceback.format_exc())

    return wrap


def change_number(num, string):
    string = string.split('/')
    number = string[-2]
    last = number[number.index('-'):]
    read = ''
    string[-2] = str(num) + str(last)
    for i in range(len(string)):
        read += string[i] if string[i] != str(num) + str(last) else ''
        if i == 0:
            read += '/'
        elif i == 2:
            read += '/'
        elif i == 3:
            read += '/'
        elif i == 4:
            read += '/'
        elif string[i] == '':
            read += '/'
    read += str(num) + str(last) + '/'
    return read

current_site = '1'

@catch_error
def get_number(update, context):
    text = update.message.text
    # https://gdz.ru/class-9/algebra/makarichev-14/123-nom/
    if '–û—Ç–º–µ–Ω–∞' in text:
        default_test(update, global_domashka_keyboard[f'{update.message.chat_id}'], '–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞')
        dispatcher.remove_handler(number_handler)
        dispatcher.add_handler(text_handler)
    elif text.isdigit():
        site = change_number(int(text), current_site)
        get_solution(update=update, context=context, site=site)
    else:
        context.bot.send_message(chat_id=update.message.chat_id, text='–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä')

def get_solution(update, context, site):
    if '–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ' in site or '/-nom/' in site:
        global current_site
        default_test(update, [['–û—Ç–º–µ–Ω–∞']],'–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n'
                                                                      '–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –≤–∞–º –Ω–æ–º–µ—Ä:')
        current_site = site
        dispatcher.remove_handler(text_handler)
        dispatcher.add_handler(number_handler)
        return
        # context.bot.send_message(chat_id=update.message.chat_id, text='–í–≤–µ–¥–∏—Ç–µ —É–ø—Ä.–Ω–æ–º–µ—Ä.–ø–∞—Ä–∞–≥—Ä–∞—Ñ.‚Ññ.')
    elif "'–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', ''" in site:
        a = 1
    else:
        s = requests.Session()
        res = s.get(site)
        html = res.text
        soup = bs(html, features="html.parser")
        temp = soup.find_all('div', class_="with-overtask")
        for i in range(len(temp)):
            element = temp[i].find('img')['src']
            bot.send_photo(chat_id=update.message.chat_id, photo=f'https:{element}')

class_people = {}

bot = telegram.Bot(token=token)
updater = Updater(token=token, use_context=True)
dispatcher = updater.dispatcher
chats_file = 'chats.txt'
data_file = 'data.txt'
domashka = {}
ex_table = {}
if os.path.getsize(chats_file) > 0:
    chats = pickle.load(open(chats_file, 'rb')) if os.path.exists(chats_file) else {}
else:
    chats = set()
f = open(data_file, 'r')
if os.path.getsize(data_file) > 0:
    data = pickle.load(open(data_file, 'rb')) if os.path.exists(chats_file) else {}
else:
    data = {'12': '12'}
f.close()
print(bot.get_me())
print(data)
glavnoe_menu_keyboard = [['üíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüíª'], ['üíµ–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞—Öüíµ', 'üë®‚Äçüíº–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Öüë®‚Äçüíº'],
                         ['üìû–ü–æ–º–æ—â—åüìû', 'üìä–í—ã–≤–æ–¥üìä']]
textbook_menu_keyboard = [['–ê–ª–≥–µ–±—Ä–∞', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'], ['–†—É—Å—Å–∫–∏–π'], ['–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
algebra_textbooks = [['–Æ.–ù. –ú–∞–∫–∞—Ä—ã—á–µ–≤, –ù.–ì. –ú–∏–Ω–¥—é–∫', '–ê.–ì. –ú–µ—Ä–∑–ª—è–∫, –í.–ë. –ü–æ–ª–æ–Ω—Å–∫–∏–π'], ['–®.–ê. –ê–ª–∏–º–æ–≤, –Æ.–ú. –ö–æ–ª—è–≥–∏–Ω'],
                     ['–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—á–µ–±–Ω–∏–∫–æ–≤']]
russki_textbooks = [['–¢—Ä–æ—Å—Ç–µ–Ω—Ü–æ–≤–∞ –õ.–ê., –õ–∞–¥—ã–∂–µ–Ω—Å–∫–∞—è –¢.–ê.', '–°.–ì. –ë–∞—Ä—Ö—É–¥–∞—Ä–æ–≤, –°.–ï. –ö—Ä—é—á–∫–æ–≤'],
                    ['–ú.–ú. –†–∞–∑—É–º–æ–≤—Å–∫–∞—è, –°.–ò. –õ—å–≤–æ–≤–∞'], ['–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—á–µ–±–Ω–∏–∫–æ–≤']]
geometriya_textbooks = [['–õ.–°. –ê—Ç–∞–Ω–∞—Å—è–Ω, –í.–§. –ë—É—Ç—É–∑–æ–≤', '–ê.–í. –ü–æ–≥–æ—Ä–µ–ª–æ–≤'], ['–ï—Ä—à–æ–≤–∞ A.–ü., –ì–æ–ª–æ–±–æ—Ä–æ–¥—å–∫–æ B.–í.'],
                        ['–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—á–µ–±–Ω–∏–∫–æ–≤']]

current_day = datetime.now()
import requests

next_day = int(datetime(2019, 11, current_day.day + 1, 0, 0).timestamp())
next_day_url = f'https://edu.tatar.ru/user/diary/day?for={next_day}'
day_url = 'https://edu.tatar.ru/user/diary/day'


def login_with_requests(session, login, password):
    payload = {'main_login': login, 'main_password': password}
    url = 'https://edu.tatar.ru/logon'
    headers = {'Referer': url}
    responce = session.post(url,
                            data=payload,
                            headers=headers)


proxies = {
    'http': f'http://{PROXY_USER}:{PROXY_PASS}@{PROXY_HOST}:{PROXY_PORT}',
    'https': f'https://{PROXY_USER}:{PROXY_PASS}@{PROXY_HOST}:{PROXY_PORT}',
}


def send_everyone(text, silent=False):
    for chat_id in chats:
        bot.send_message(chat_id=chat_id, text=text, disable_web_page_preview=True,
                         disable_notification=silent)


@catch_error
def start(update, context):
    chats.add(update.message.chat_id)
    with open(chats_file, 'wb') as file:
        pickle.dump(chats, file)
    default_test(update, glavnoe_menu_keyboard, f"–Ø –±–æ—Ç –ì–î–ó")


def default_test(update, custom_keyboard, text):
    reply_markup = telegram.ReplyKeyboardMarkup(custom_keyboard)
    bot.send_message(chat_id=update.message.chat_id,
                     text=text,
                     reply_markup=reply_markup)





@catch_error
def text(update, context):
    text = update.message.text
    subject_day = []
    if '–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç' in text:
        context.bot.send_message(chat_id=update.message.chat_id, text=f"""
        üíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüíª
        üë®‚Äçüíº–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: -üë®‚Äçüíº
        üí∞–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –≤—ã–≤–æ–¥–µ: üí∞
        üíµ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:üíµ
        üí≥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:üí≥
        –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ - 
    """)
        print(update.message.from_user.first_name)
    else:
        default_test(update, glavnoe_menu_keyboard, '–ö–æ–º–º–∞–Ω–¥–∞ "' + text + '" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')


start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

text_handler = MessageHandler(Filters.text, text)
dispatcher.add_handler(text_handler)
updater.start_polling()